{
  "project_type": "Backend API",
  "description": "Server-side API application with database integration",
  "required_agents": [
    "main-agent-project-manager",
    "backend-engineer",
    "code-reviewer",
    "testing-specialist",
    "deployment-engineer"
  ],
  "optional_agents": [
    "product-manager",
    "security-specialist"
  ],
  "variables": {
    "PROJECT_TYPE": "Backend API",
    "PROJECT_DOMAIN": "server-side application",
    "FRONTEND_FRAMEWORK": "Express.js/FastAPI/Django/Spring Boot",
    "FRAMEWORK_FEATURES": "RESTful APIs, database integration, authentication",
    "TYPE_SYSTEM": "TypeScript/Python type hints/Java types",
    "STYLING_APPROACH": "API documentation styling",
    "IMPLEMENTATION_AGENT": "backend-engineer",
    "IMPLEMENTATION_DESCRIPTION": "API development, database design, server architecture",
    "IMPLEMENTATION_TRIGGERS": "API endpoints, database modeling, authentication systems, performance optimization",
    "DESIGN_AGENT": "backend-engineer",
    "DESIGN_DESCRIPTION": "System architecture, database design, API specification",
    "DESIGN_TRIGGERS": "System architecture decisions, database schema design, API design",
    "DEPLOYMENT_AGENT": "deployment-engineer",
    "DEPLOYMENT_DESCRIPTION": "Server deployment, containerization, database management",
    "DEPLOYMENT_TRIGGERS": "Production deployment, container orchestration, database migration, monitoring setup",
    "TECH_STACK": "Node.js/Python/Java + Database + Docker",
    "BROWSER_SUPPORT_REQUIREMENTS": "API client compatibility",
    "PERFORMANCE_REQUIREMENTS": "API response <200ms, high concurrency support",
    "ACCESSIBILITY_REQUIREMENTS": "API documentation accessibility",
    "QUALITY_METRICS": "API test coverage 90%+, database query optimization",
    "PERFORMANCE_STANDARDS": "API response times, database query performance",
    "TESTING_FRAMEWORK": "Jest/pytest/JUnit + API testing tools",
    "E2E_TEST_FRAMEWORK": "Supertest/requests/RestAssured",
    "UNIT_TEST_FRAMEWORK": "Jest/pytest/JUnit",
    "TEST_COVERAGE_TARGET": "90",
    "PERFORMANCE_TEST_REQUIREMENTS": "Load testing, database performance testing",
    "DEPLOYMENT_PLATFORM": "AWS/GCP/Azure + Docker",
    "INFRASTRUCTURE_TYPE": "containerized microservices",
    "CI_CD_PLATFORM": "GitHub Actions + Docker Hub",
    "MONITORING_STACK": "Prometheus + Grafana + ELK Stack",
    "INFRASTRUCTURE_CONFIGURATION": "Container orchestration with load balancing",
    "DEPLOYMENT_SUCCESS_RATE": "99.9",
    "PRODUCTION_PERFORMANCE_REQUIREMENTS": "API latency <200ms, 99.9% uptime",
    "SECURITY_STANDARDS": "OWASP compliance, data encryption",
    "DISASTER_RECOVERY_TIME": "4-hour",
    "MONITORING_METRICS": "API performance, database health, system resources"
  },
  "development_stages": [
    "Architecture & Database Design",
    "Core API Development",
    "Authentication & Security",
    "Database Integration",
    "Testing & Quality Assurance",
    "Performance Optimization",
    "Production Deployment",
    "Monitoring & Maintenance"
  ],
  "typical_file_structure": [
    {
      "folder_name": "src/routes",
      "folder_description": "API route definitions"
    },
    {
      "folder_name": "src/models",
      "folder_description": "Database models and schemas"
    },
    {
      "folder_name": "src/controllers",
      "folder_description": "Business logic controllers"
    },
    {
      "folder_name": "src/middleware",
      "folder_description": "Authentication and validation middleware"
    },
    {
      "folder_name": "src/services",
      "folder_description": "External service integrations"
    },
    {
      "folder_name": "tests",
      "folder_description": "API and integration tests"
    },
    {
      "folder_name": "docker",
      "folder_description": "Docker configuration"
    }
  ],
  "typical_commands": [
    {
      "command": "npm run dev",
      "description": "Start development server"
    },
    {
      "command": "npm run test",
      "description": "Run test suite"
    },
    {
      "command": "npm run migrate",
      "description": "Run database migrations"
    },
    {
      "command": "docker-compose up",
      "description": "Start with dependencies"
    }
  ]
}